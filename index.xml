<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Malcolm Smith Fraser</title>
    <link>https://malcolmsfraser.github.io/</link>
    <description>Recent content on Malcolm Smith Fraser</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 22 Nov 2021 19:36:36 +0000</lastBuildDate><atom:link href="https://malcolmsfraser.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Covid Death Forecasting</title>
      <link>https://malcolmsfraser.github.io/post/covid-death-forecasting/</link>
      <pubDate>Mon, 22 Nov 2021 19:36:36 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/covid-death-forecasting/</guid>
      <description>In this post I will discuss the overall scope, the teams approach, and the results of a final project I completed for the Statistical Program for Big Data course at Duke.
Project Scope The goal of this project was to determine if a univariate autoregressive model or a multivariate autoregressive model was better at forecasting COVID-19 deaths in the Durham area (DHPC). The data used to perform this analysis came the AWS COVID-19 data lake, and from the North Carolina Department of Heath and Human Services&amp;rsquo;s COVID-19 dashboard.</description>
    </item>
    
    <item>
      <title>Explaining Tensorflow Predictions with SHapley Additive exPlanations</title>
      <link>https://malcolmsfraser.github.io/post/tensorflow-shap/</link>
      <pubDate>Fri, 12 Nov 2021 01:03:23 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/tensorflow-shap/</guid>
      <description>In this post I cover how I to train a simple CNN using tensorflow, and explain the predictions using SHAP.
SHAP (SHapley Additive exPlanations) is a method to explain predictions based on the game theory concept of optimal Shapley Values. In short, the goal of SHAP is to explain the prediction of an instance, x, by computing the contribution of each feature to the prediction.
Training the model The model I train will be able to distinguish between dragonflies, cockroaches, and beetles.</description>
    </item>
    
    <item>
      <title>Streamlit Demo</title>
      <link>https://malcolmsfraser.github.io/post/streamlit-demo/</link>
      <pubDate>Fri, 15 Oct 2021 20:14:13 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/streamlit-demo/</guid>
      <description>In this blog post I will walk through how I used streamlit to build a dashboard for visualizing and comparing data on post-PhD activities of 2017 graduates by sex.
Streamlit is one of most popular python webapp and dashboarding tools out there today. It links connects almost seamlessly with many of the visualization tools in the Python DS ecosystem, and has tons of options for customization.
Let&amp;rsquo;s get started!
Part 1: Analyze the data Before moving to Streamlit, I started in a Jupyter notebook to explore the data, find some interesting visualizations and overall just get a feel for the data - both content and structure.</description>
    </item>
    
    <item>
      <title>Malaria Visualizations</title>
      <link>https://malcolmsfraser.github.io/post/malaria-visualizations/</link>
      <pubDate>Thu, 30 Sep 2021 18:15:11 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/malaria-visualizations/</guid>
      <description>In this post I briefly explore the malaria data from https://github.com/rfordatascience/tidytuesday/tree/master/data/2018/2018-11-13. The visualizations are made usingn geopandas and plotly. Geopandas just as simple as standard pandas but also allows for easier handling of geographical data. Plotly was my choice for the interactive visualizations as they are one of the easiest to export and embed with the help of the .to_html() function that all plotly figures have.
This first visualization shows the distribution of malaria deaths in countries broken down by the quantiles of malaria deaths.</description>
    </item>
    
    <item>
      <title>Ten Digit Prime</title>
      <link>https://malcolmsfraser.github.io/post/ten-digit-prime/</link>
      <pubDate>Sun, 12 Sep 2021 23:40:47 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/ten-digit-prime/</guid>
      <description>Finding the first 10 digit prime in the decimal expansion of 17pi
 Helper functions:
 from mpmath import mpmath def get_pi(n): &amp;#34;&amp;#34;&amp;#34;Returns the first n digits of pi&amp;#34;&amp;#34;&amp;#34; mp.dps = n return mp.pi def check_prime(n): &amp;#34;&amp;#34;&amp;#34;Checks if n is prime by searching range(2,sqrt(n)) for factors&amp;#34;&amp;#34;&amp;#34; prime_flag = 0 if n &amp;gt; 1: for i in range(2, int(n**.5) + 1): if (n % i == 0): prime_flag = 1 break if (prime_flag == 0): return True else: return False else: return False  My solution:</description>
    </item>
    
    <item>
      <title>Project Euler: Problem 119</title>
      <link>https://malcolmsfraser.github.io/post/projecteuler_119/</link>
      <pubDate>Thu, 02 Sep 2021 06:12:47 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/projecteuler_119/</guid>
      <description>Digit power sum (solved by 12212 as of 9/1/2021)
The number 512 is interesting because it is equal to the sum of its digits raised to some power: 5 + 1 + 2 = 8, and 83 = 512. Another example of a number with this property is 614656 = 284.
We shall define an to be the nth term of this sequence and insist that a number must contain at least two digits to have a sum.</description>
    </item>
    
    <item>
      <title>Project Euler: Problem 36</title>
      <link>https://malcolmsfraser.github.io/post/projecteuler_36/</link>
      <pubDate>Thu, 02 Sep 2021 05:38:26 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/projecteuler_36/</guid>
      <description>Double-base palindromes (solved by 89539 as of 8/25/25)
The decimal number, 585 = 10010010012 (binary), is palindromic in both bases.
Find the sum of all numbers, less than one million, which are palindromic in base 10 and base 2.
(Please note that the palindromic number, in either base, may not include leading zeros.)
 Helper functions:
 def get_binary(x): &amp;#34;&amp;#34;&amp;#34;Returns the binary form of the base 10 number without leading zeroes&amp;#34;&amp;#34;&amp;#34; b = bin(x).</description>
    </item>
    
    <item>
      <title>Project Euler: Problem 9</title>
      <link>https://malcolmsfraser.github.io/post/projecteuler_9/</link>
      <pubDate>Thu, 02 Sep 2021 05:09:31 +0000</pubDate>
      
      <guid>https://malcolmsfraser.github.io/post/projecteuler_9/</guid>
      <description>Special Pythagorean triplet (solved by 360,641 as of 8/25/2021)
A Pythagorean triplet is a set of three natural numbers, a &amp;lt; b &amp;lt; c, for which,
$a^2 + b^2 = c^2$ For example, $3^2 + 4^2 = 9 + 16 = 25 = 5^2$.
There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.
 My solution:
 import math def find_special(value=1000): &amp;#34;&amp;#34;&amp;#34; Finds the first pythagorean triplet who&amp;#39;s sums add to the input value.</description>
    </item>
    
  </channel>
</rss>
